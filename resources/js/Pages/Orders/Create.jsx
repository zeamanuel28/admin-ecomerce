import React, { useState } from 'react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head, useForm, Link } from '@inertiajs/react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function OrderCreate({ auth, users, products }) { // Assuming users and products are passed for selection
    const { data, setData, post, processing, errors } = useForm({
        user_id: '',
        order_number: '', // You might generate this on the backend
        total_amount: '',
        status: 'pending',
        shipping_address: '',
        billing_address: '',
        payment_method: 'cash_on_delivery',
        payment_status: 'pending',
        // For order items, you'd typically manage a list of selected products
        // For simplicity here, we'll just focus on order header details.
        // A real implementation would need a dynamic way to add/remove products.
        selected_products: [], // Example for managing items, not fully implemented here
    });

    // Dummy data for example statuses and payment methods if not passed from backend
    const availableStatuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];
    const paymentMethods = ['cash_on_delivery', 'credit_card', 'paypal'];

    const submit = (e) => {
        e.preventDefault();
        // Note: Backend 'store' method for OrderController would need to be implemented
        // to handle this data, including generating order_number and processing items.
        post(route('orders.store'));
    };

    return (
        <AuthenticatedLayout
            user={auth.user}
            header={<h2 className="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">Create New Order</h2>}
        >
            <Head title="Create Order" />

            <div className="py-12">
                <div className="max-w-md mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 text-gray-900 dark:text-gray-100">
                            <form onSubmit={submit} className="space-y-6">
                                {/* User Selection (if creating for an existing user) */}
                                <div>
                                    <Label htmlFor="user_id">Customer</Label>
                                    <Select
                                        value={data.user_id}
                                        onValueChange={(value) => setData('user_id', value)}
                                    >
                                        <SelectTrigger className="w-full mt-1">
                                            <SelectValue placeholder="Select a customer" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {/* Assuming 'users' prop is passed from backend, e.g., all registered users */}
                                            {users && users.map(user => (
                                                <SelectItem key={user.id} value={user.id}>
                                                    {user.name} ({user.email})
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    {errors.user_id && <p className="text-red-500 text-xs mt-1">{errors.user_id}</p>}
                                </div>

                                {/* Order Number (might be auto-generated by backend) */}
                                <div>
                                    <Label htmlFor="order_number">Order Number (Optional)</Label>
                                    <Input
                                        id="order_number"
                                        type="text"
                                        name="order_number"
                                        value={data.order_number}
                                        className="mt-1 block w-full"
                                        onChange={(e) => setData('order_number', e.target.value)}
                                        placeholder="Leave empty for auto-generate"
                                    />
                                    {errors.order_number && <p className="text-red-500 text-xs mt-1">{errors.order_number}</p>}
                                </div>

                                {/* Total Amount */}
                                <div>
                                    <Label htmlFor="total_amount">Total Amount</Label>
                                    <Input
                                        id="total_amount"
                                        type="number"
                                        step="0.01"
                                        name="total_amount"
                                        value={data.total_amount}
                                        className="mt-1 block w-full"
                                        onChange={(e) => setData('total_amount', e.target.value)}
                                    />
                                    {errors.total_amount && <p className="text-red-500 text-xs mt-1">{errors.total_amount}</p>}
                                </div>

                                {/* Status */}
                                <div>
                                    <Label htmlFor="status">Status</Label>
                                    <Select
                                        value={data.status}
                                        onValueChange={(value) => setData('status', value)}
                                    >
                                        <SelectTrigger className="w-full mt-1">
                                            <SelectValue placeholder="Select status" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {availableStatuses.map(status => (
                                                <SelectItem key={status} value={status}>
                                                    {status.charAt(0).toUpperCase() + status.slice(1)}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    {errors.status && <p className="text-red-500 text-xs mt-1">{errors.status}</p>}
                                </div>

                                {/* Shipping Address */}
                                <div>
                                    <Label htmlFor="shipping_address">Shipping Address</Label>
                                    <Textarea
                                        id="shipping_address"
                                        name="shipping_address"
                                        value={data.shipping_address}
                                        className="mt-1 block w-full"
                                        onChange={(e) => setData('shipping_address', e.target.value)}
                                    />
                                    {errors.shipping_address && <p className="text-red-500 text-xs mt-1">{errors.shipping_address}</p>}
                                </div>

                                {/* Billing Address */}
                                <div>
                                    <Label htmlFor="billing_address">Billing Address (Optional)</Label>
                                    <Textarea
                                        id="billing_address"
                                        name="billing_address"
                                        value={data.billing_address}
                                        className="mt-1 block w-full"
                                        onChange={(e) => setData('billing_address', e.target.value)}
                                    />
                                    {errors.billing_address && <p className="text-red-500 text-xs mt-1">{errors.billing_address}</p>}
                                </div>

                                {/* Payment Method */}
                                <div>
                                    <Label htmlFor="payment_method">Payment Method</Label>
                                    <Select
                                        value={data.payment_method}
                                        onValueChange={(value) => setData('payment_method', value)}
                                    >
                                        <SelectTrigger className="w-full mt-1">
                                            <SelectValue placeholder="Select payment method" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {paymentMethods.map(method => (
                                                <SelectItem key={method} value={method}>
                                                    {method.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    {errors.payment_method && <p className="text-red-500 text-xs mt-1">{errors.payment_method}</p>}
                                </div>

                                {/* Payment Status */}
                                <div>
                                    <Label htmlFor="payment_status">Payment Status</Label>
                                    <Select
                                        value={data.payment_status}
                                        onValueChange={(value) => setData('payment_status', value)}
                                    >
                                        <SelectTrigger className="w-full mt-1">
                                            <SelectValue placeholder="Select payment status" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {['pending', 'paid', 'failed', 'refunded'].map(status => (
                                                <SelectItem key={status} value={status}>
                                                    {status.charAt(0).toUpperCase() + status.slice(1)}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    {errors.payment_status && <p className="text-red-500 text-xs mt-1">{errors.payment_status}</p>}
                                </div>

                                {/* Add Product Items (Highly simplified - a real implementation would be complex) */}
                                {/* You would need a way to search for products and add them with quantities */}
                                {/* <div>
                                    <h4 className="text-lg font-semibold mt-6 mb-3">Order Items</h4>
                                    {data.selected_products.length === 0 ? (
                                        <p className="text-gray-500">No products added yet.</p>
                                    ) : (
                                        // Display selected products
                                        // Add remove buttons
                                    )}
                                    <Button type="button" variant="outline" className="mt-2">Add Product to Order</Button>
                                </div> */}

                                <div className="flex items-center justify-end mt-4">
                                    <Link href={route('orders.index')} className="mr-4">
                                        <Button variant="outline">Cancel</Button>
                                    </Link>
                                    <Button disabled={processing}>
                                        Create Order
                                    </Button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}
